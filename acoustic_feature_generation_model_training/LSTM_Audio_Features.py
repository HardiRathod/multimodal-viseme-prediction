#!/usr/bin/env python
# coding: utf-8

# In[1]:


import torch
import torch.nn as nn

import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from torch.utils.data import Dataset, DataLoader

get_ipython().run_line_magic('matplotlib', 'inline')
import warnings
warnings.filterwarnings('ignore')


# In[2]:


model = LSTM()
loss_function = nn.MSELoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
#criterion = 


# In[4]:





# In[5]:


def train_model_function(n_epochs, train_x, train_y, test_x, test_y, batch_size, learning_rate, input_data_size, number_of_classes, model_name):
    print("-------------Loading Dataset----------")
    train_dataset = T2DV2Dataset(train_x, train_y)
    test_dataset = T2DV2Dataset(test_x, test_y)
    train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, num_workers=num_workers,)
    test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, num_workers=num_workers)
    model_ff = LSTM(20, 100, number_of_classes)
    loss_function = nn.MSELoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
    criterion = nn.CrossEntropyLoss()

    print("-----------Starting the Model Training -------------")
    valid_loss_min = np.Inf 
    for epoch in range(n_epochs):

        train_loss = 0.0
        valid_loss = 0.0
        print("Starting epoch")
        model_ff.train() # prep model for training
        for data, target in train_loader:
            print(len(data))
            model_ff.hidden_cell = (torch.zeros(1, 1, model.hidden_layer_size),
                        torch.zeros(1, 1, model.hidden_layer_size))
            optimizer.zero_grad()
            torch.autograd.set_detect_anomaly(True)
            target = target.type(torch.LongTensor)
            #print(data.shape, hidden.shape)
            
            output = model_ff(data.float())
        
            # output = torch.argmax(output, dim=1)
            #target = target.reshape(target.shape[0])
            #print(output, target)
            loss = criterion(output, target).clone()
            print(loss)
            loss.backward()
            train_loss += loss.item()*data.size(0)
            optimizer.step()
            # hidden = hidden_1
               
        model_ff.eval()
        print("Evaluating")
        for data, target in test_loader:
            model_ff.hidden_cell = (torch.zeros(1, 1, model.hidden_layer_size),
                        torch.zeros(1, 1, model.hidden_layer_size))
            torch.autograd.set_detect_anomaly(True)
            target = target.type(torch.LongTensor)
            # print(data.shape, hidden.shape)
            target = target.reshape(target.shape[0])
            output = model_ff(data.float())
            loss = criterion(output, target) 
            valid_loss += loss.item()*data.size(0)

        train_loss = train_loss/len(train_loader.dataset)
        valid_loss = valid_loss/len(test_loader.dataset)


        print('Epoch: {} \tTraining Loss: {:.6f} \tValidation Loss: {:.6f}'.format(
            epoch+1, 
            train_loss,
            valid_loss
            ))

        if valid_loss <= valid_loss_min:
            print('Validation loss decreased ({:.6f} --> {:.6f}).  Saving model ...'.format(
            valid_loss_min,
            valid_loss))
            torch.save(model_ff.state_dict(), model_name)
            valid_loss_min = valid_loss


# In[6]:


read_viseme_mod = 'viseme_modified_new'
audio_dir = 'G:/Shared drives/CS535 Project/data/raw_audio'
#csv_file = '/content/drive/Shareddrives/CS535 Project/mfcc_feature_set_modified.csv'
read_viseme_mod_2 = '../data/viseme_modified_2'


# In[12]:


get_ipython().system('pip install librosa')


# In[5]:


import pandas
import xml.etree.ElementTree as ET
import os
import csv
import re
get_ipython().run_line_magic('matplotlib', 'inline')
import numpy as np
import pandas as pd
#import librosa as lb
#import librosa.display
import matplotlib.pyplot as plt
#from gensim.models import Word2Vec
def read_bml(file_name):
    #with open(file_name, 'r', encoding = 'utf-8-sig') as xml_file:
    tree = ET.parse(file_name)
    root = tree.getroot()
    return root
    

def read_viseme(root):
    viseme_l = list()
    for child in root:
        viseme = list()
#         print(child.tag)
        if(child.tag == "lips"):
#             print(True)
            viseme.append(child.attrib['viseme'])
            viseme.append(child.attrib['start'])
            viseme.append(child.attrib['end'])
            viseme_l.append(viseme)
    return viseme_l
            


# In[157]:


def create_mfcc(audio_path, start_ms, end_ms):
    start = start_ms/100
    end = end_ms/100
    y, sr = librosa.load(audio_path,sr=28000)
    y_cut = y[round(start*sr,ndigits=None)
         :round(end*sr, ndigits= None)]
    try:
        data = np.array([padding(librosa.feature.mfcc(y_cut, 
             n_fft=n_fft,hop_length=hop_length,n_mfcc=128),128,50)])
    except:
        data = librosa.feature.mfcc(y_cut, 
             n_fft=n_fft,hop_length=hop_length,n_mfcc=128)
        data = np.array([data[:, :50]])
    #data, sample_rate = lb.load(audio_path, offset = start, duration = end - start)
#     lb.display.waveplot(data)
#     print(type(data), type(sample_rate))
    #mfcc = librosa.feature.mfcc(y=data, sr=sample_rate)
#     librosa.display.specshow(mfcc, sr=sample_rate, x_axis='time')
    #mfccScaled = np.mean(mfcc.T, axis=0)
    print(data.shape)
    return data


# In[ ]:


def create_mfcc(audio_path, start_ms, end_ms):
    start = start_ms/100
    end = end_ms/100
    y, sr = librosa.load(audio_path,sr=28000)
    y_cut = y[round(start*sr,ndigits=None)
         :round(end*sr, ndigits= None)]
    data = np.array(librosa.feature.mfcc(y_cut, n_mfcc=128)
    #data, sample_rate = lb.load(audio_path, offset = start, duration = end - start)
#     lb.display.waveplot(data)
#     print(type(data), type(sample_rate))
    #mfcc = librosa.feature.mfcc(y=data, sr=sample_rate)
#     librosa.display.specshow(mfcc, sr=sample_rate, x_axis='time')
    #mfccScaled = np.mean(mfcc.T, axis=0)
    print(data.shape)
    return data


# In[ ]:


get_ipython().system('tail -c +2 ../data/viseme_modified/Ses01F_impro03_M000.bml.txt')


# In[ ]:





# In[ ]:





# In[89]:


## Running the above model for MFCC feature set
data = pd.read_csv('mfcc_feature_set.csv', header = None)


# In[10]:


from google.colab import drive
drive.mount('/content/drive')


# In[ ]:





# In[90]:


data.head(10)


# In[91]:


#data = data[data[20]!= 'Oy']
data = data.dropna()


# In[92]:


data = pd.DataFrame(X)
data['label'] = y


# In[93]:


data


# In[95]:


label = 'label'
unique_classes = data[label].unique().tolist()
indexes = [i for i in range(len(unique_classes))]
replace_dict = {unique_classes[i]:i for i in indexes}
data[[label]] = data[[label]].replace(replace_dict)


# In[99]:


data['label'].value_counts()


# In[108]:


new_data = data[data[label].isin([13, 7, 1, 0, 3, 5])]
new_data_labels = new_data[label]
new_data.drop(columns = [label], inplace = True)


# In[2]:


def padding(array, xx, yy):
    """
    :param array: numpy array
    :param xx: desired height
    :param yy: desirex width
    :return: padded array
    """

    h = array.shape[0]
    w = array.shape[1]
    #print(h, w)

    a = (xx - h) // 2
    aa = xx - a - h

    b = (yy - w) // 2
    bb = yy - b - w
    print(h, w, xx, yy)
    return np.pad(array, pad_width=((a, aa), (b, bb)), mode='constant')


# In[3]:


hop_length = 15 #the default spacing between frames
n_fft = 100


# In[162]:


import pickle
def get_features():
    features=pickle.load(open('intermediate_result_mfcc_new.pkl', 'rb')) #list to save features
    labels=pickle.load(open('intermediate_result_labels_new.pkl', 'rb')) #list to save labels
    #print(len())
    print(len(os.listdir(read_viseme_mod)))
    save_every_500 = 0
    for filename in os.listdir(read_viseme_mod):
        save_every_500 += 1
        if save_every_500 <= 500:
            continue
        print(filename)
        file_path_read = os.path.join(read_viseme_mod, filename)
        #     print(file_path_read)
        f_r = open(file_path_read,'r',  encoding = 'utf-8-sig')
        root = read_bml(f_r)
        viseme_extract = read_viseme(root)
        f_split = filename.split("_")
        audio_session = f_split[0][4]
        if(len(f_split)==4):
            audio_file_dir = f_split[0]+"_"+f_split[1]+"_"+f_split[2]
        else:
            audio_file_dir = f_split[0]+"_"+f_split[1]
        audio_file_name = filename.split(".")[0]+".wav"
        audio_path = audio_dir + "/Session" + audio_session + "/sentences/wav/"+audio_file_dir+"/"+audio_file_name   

        for rec in viseme_extract:
            mfcc = create_mfcc(audio_path,float(rec[1]),float(rec[2])).tolist()
            #print(mfcc.shape, len(mfcc))
            #print(mfcc)
            labels.append(rec[0])
            features.append(mfcc)
        if save_every_500 %500 == 0:
            pickle.dump(features, open('intermediate_result_mfcc_new.pkl', 'wb'))
            pickle.dump(labels, open('intermediate_result_labels_new.pkl', 'wb'))
    output=np.concatenate(features,axis=0)
    return(np.array(output), labels)
X,y=get_features()
pickle.dump(X, open('result_mfcc_n.pkl', 'wb'))
pickle.dump(y, open('result_labels_n.pkl','wb'))
X = np.array((X-np.min(X))/(np.max(X)-np.min(X)))
X = X/np.std(X)
y = np.array(y)


# In[138]:


J = [[[0.0, 0.0, 0.0, 0.0, 0.0, -914.7479248046875, -928.32080078125, -956.630859375, -989.0416259765625, -986.0355224609375, -986.1458129882812, -992.7423706054688, -986.7444458007812, -970.7958984375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -75.66998291015625, -67.10746765136719, -33.847537994384766, 14.362737655639648, 11.144804000854492, 6.789497375488281, 5.907635688781738, 6.110166549682617, -6.939776420593262, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -11.584033012390137, -11.874900817871094, -23.625606536865234, -57.384178161621094, -60.86292266845703, -59.79927444458008, -51.10954284667969, -58.930110931396484, -48.50548553466797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 24.65139389038086, 23.73362922668457, 26.85575294494629, 48.45073699951172, 57.29698944091797, 58.14913558959961, 53.61344909667969, 50.87787628173828, 40.057823181152344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -20.0601749420166, -20.649356842041016, -17.54778289794922, -19.6002197265625, -23.689760208129883, -27.16299819946289, -33.31346130371094, -25.225597381591797, -23.379018783569336, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.5514678955078125, -0.515127420425415, -7.449276447296143, -20.323162078857422, -22.035001754760742, -17.66977882385254, -10.938961029052734, -8.285733222961426, -1.507361888885498, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -6.995469570159912, -9.468720436096191, -7.368051052093506, 9.46524715423584, 16.756319046020508, 13.136824607849121, 8.380167007446289, 3.6622190475463867, -1.58480703830719, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -12.733695983886719, -13.466633796691895, -6.950738430023193, -15.253082275390625, -25.49805450439453, -26.488994598388672, -29.08267593383789, -24.437828063964844, -25.105588912963867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -1.0145022869110107, 0.8709299564361572, -5.830172538757324, -6.237634658813477, 2.3597216606140137, 7.928748607635498, 17.11338233947754, 16.092662811279297, 13.980331420898438, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -4.711114406585693, -4.812513828277588, -9.451919555664062, -6.743411540985107, -5.049849033355713, -9.314034461975098, -7.147740364074707, -9.6063814163208, -7.223208427429199, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -9.511070251464844, -11.61070728302002, -1.8076221942901611, -5.256684303283691, -18.74213409423828, -18.01941680908203, -21.598264694213867, -13.508418083190918, -19.943506240844727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -4.360830307006836, -4.477691650390625, -8.594511032104492, -8.467208862304688, 1.8968675136566162, 4.447441101074219, 3.9032392501831055, 4.787047386169434, 7.6906280517578125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -0.4908334016799927, 2.4458727836608887, -5.005110740661621, -4.978484630584717, -9.242849349975586, -10.667234420776367, -4.866796493530273, -11.176923751831055, -7.055015563964844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -5.072423458099365, -2.566958427429199, 5.998185157775879, 5.075990676879883, 3.093385696411133, 2.888218641281128, -1.9177392721176147, -5.631043910980225, -9.778724670410156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -5.453206539154053, -3.024923801422119, -5.6710004806518555, -10.858938217163086, -2.7664954662323, -1.1250035762786865, -5.365965843200684, -7.192038059234619, -2.505495071411133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -8.276030540466309, -7.8361053466796875, -13.993753433227539, -12.586832046508789, -20.83168601989746, -16.717208862304688, -7.1285319328308105, -6.004875183105469, -6.895678520202637, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -9.617317199707031, -12.69848346710205, -4.961751937866211, -3.8290390968322754, -0.2147226333618164, -4.307456016540527, -10.690235137939453, -7.440755844116211, -10.561108589172363, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -5.978911399841309, -4.648836135864258, -6.9958038330078125, -11.901877403259277, -6.210099220275879, -5.610581398010254, -12.091841697692871, -14.077409744262695, -10.223811149597168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -12.949070930480957, -6.858346462249756, -12.634925842285156, -11.719391822814941, -18.55922508239746, -13.003686904907227, -5.894303798675537, -10.332111358642578, -9.493820190429688, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -11.976500511169434, -9.539932250976562, -5.130197525024414, -9.508624076843262, -8.596487045288086, -11.692715644836426, -11.6669340133667, -17.295875549316406, -17.507160186767578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -7.195004463195801, -9.23885726928711, -12.246091842651367, -13.587200164794922, -9.55091667175293, -7.162647247314453, -7.598878383636475, -8.856558799743652, -8.832902908325195, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -7.212238311767578, -7.210389137268066, -8.507013320922852, -3.8242902755737305, -11.274473190307617, -12.313858032226562, -13.092180252075195, -1.1158729791641235, -1.967993974685669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -6.141100883483887, -6.581745147705078, -4.279494762420654, -11.746142387390137, -10.174166679382324, -10.911222457885742, -7.752435684204102, -7.421870708465576, -10.267118453979492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -7.808372497558594, -10.344096183776855, -14.161659240722656, -11.115242004394531, -6.973885536193848, -2.0039048194885254, 4.227405548095703, -4.04457426071167, -5.34796142578125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -6.585489749908447, -2.7915656566619873, -0.610504150390625, 2.8971076011657715, -5.255130290985107, -10.3232421875, -13.6988525390625, -6.319288730621338, -5.517350673675537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -10.199769020080566, -8.534826278686523, -9.928125381469727, -22.24383544921875, -14.644421577453613, -11.752659797668457, -11.95481014251709, -13.31032657623291, -13.517433166503906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -19.097904205322266, -25.2213134765625, -28.007253646850586, -17.3015079498291, -16.646865844726562, -14.409985542297363, -13.629451751708984, -20.27501678466797, -19.963233947753906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -13.575973510742188, -13.899442672729492, -8.387529373168945, -5.694901943206787, -12.405338287353516, -18.64738655090332, -23.580039978027344, -11.036968231201172, -12.44772720336914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 5.293165683746338, 8.675817489624023, 6.442839622497559, -6.01276969909668, 2.446377754211426, 6.9879655838012695, 6.312899112701416, 6.670802116394043, 7.13248348236084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 27.21798324584961, 25.975982666015625, 24.85870361328125, 38.66431427001953, 34.80089569091797, 33.948097229003906, 38.20361328125, 24.806333541870117, 25.635652542114258, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 48.747840881347656, 47.30404281616211, 54.217567443847656, 54.45072555541992, 53.368003845214844, 49.09209060668945, 49.30173873901367, 54.48318099975586, 53.867069244384766, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 60.747161865234375, 59.79246520996094, 59.706077575683594, 56.25802230834961, 60.111167907714844, 59.883094787597656, 51.29498291015625, 54.65747833251953, 61.17947006225586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 40.267860412597656, 37.29383850097656, 35.37730407714844, 48.986812591552734, 43.21445846557617, 40.13922119140625, 41.528350830078125, 38.14989471435547, 38.24861145019531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.05974602699279785, -0.6055968999862671, 4.647101879119873, -3.3404273986816406, -1.8959463834762573, -0.4943561553955078, 6.1134033203125, 9.326364517211914, 6.012991905212402, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -20.73484230041504, -18.603525161743164, -18.800277709960938, -18.87126922607422, -16.039522171020508, -16.72939109802246, -25.094228744506836, -27.257587432861328, -23.818565368652344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -19.30251693725586, -19.200424194335938, -23.979652404785156, -13.485464096069336, -14.400278091430664, -15.456039428710938, -15.201062202453613, -14.87993049621582, -19.205162048339844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -3.9536514282226562, -6.7852277755737305, -0.8324508666992188, -10.657835006713867, -9.285806655883789, -7.332746505737305, -0.42145729064941406, 0.3572874069213867, -1.465219497680664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 19.77895736694336, 16.22171974182129, 16.283498764038086, 19.477828979492188, 19.450267791748047, 16.794326782226562, 8.99472427368164, 10.521660804748535, 16.665191650390625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 13.762202262878418, 13.732629776000977, 6.764278411865234, 14.598305702209473, 11.423702239990234, 10.78278636932373, 9.902091979980469, 19.285085678100586, 16.15243911743164, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -21.8150634765625, -20.926790237426758, -15.266901016235352, -26.472278594970703, -22.913862228393555, -20.472354888916016, -11.012811660766602, -17.92856216430664, -21.52391815185547, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -27.414539337158203, -27.952804565429688, -26.770736694335938, -21.559425354003906, -21.1068115234375, -20.9693660736084, -21.015087127685547, -25.903400421142578, -25.983434677124023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 3.114398956298828, 4.773279190063477, -0.45756053924560547, 3.760801315307617, -0.69903564453125, -2.9413204193115234, -6.701587677001953, 5.173053741455078, 2.928171157836914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 20.0678768157959, 18.88633155822754, 21.825952529907227, 12.038589477539062, 14.857967376708984, 15.740324974060059, 17.56057357788086, 13.808950424194336, 16.951581954956055, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 16.427490234375, 15.097553253173828, 14.992795944213867, 21.132240295410156, 16.44397735595703, 18.321523666381836, 18.099536895751953, 12.723556518554688, 17.507591247558594, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -4.991257667541504, -0.03824567794799805, -3.0313658714294434, -4.128871917724609, -1.2932252883911133, -3.8481764793395996, -7.147353172302246, -4.695744514465332, -7.7440595626831055, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -25.013763427734375, -22.8833065032959, -19.863262176513672, -25.321441650390625, -20.149250030517578, -18.671459197998047, -16.28622817993164, -21.380695343017578, -22.457481384277344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -7.876455783843994, -10.209244728088379, -9.50320816040039, -3.6054506301879883, -10.808849334716797, -8.109136581420898, -6.185376167297363, -7.517666816711426, -5.945664405822754, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 10.522357940673828, 10.83920955657959, 7.0366058349609375, 0.8161716461181641, 6.160470962524414, 5.684136390686035, 1.7560243606567383, 5.7519121170043945, 5.037565231323242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -7.4999613761901855, -5.151388168334961, -5.061648368835449, -7.424263000488281, -8.110803604125977, -8.513025283813477, -11.645549774169922, -9.83043098449707, -6.745967864990234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -26.3067626953125, -25.082061767578125, -24.536922454833984, -20.803253173828125, -23.496288299560547, -23.045204162597656, -21.99222183227539, -28.133197784423828, -27.356830596923828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -23.002883911132812, -20.866323471069336, -22.65382194519043, -27.848182678222656, -22.782241821289062, -18.92414093017578, -13.335145950317383, -20.567617416381836, -25.184282302856445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -5.866232872009277, -2.692018508911133, -2.859807014465332, -5.0190534591674805, -11.10468578338623, -12.171086311340332, -12.550918579101562, -7.880474090576172, -5.867165565490723, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 12.011856079101562, 8.762619018554688, 6.890275955200195, 8.201499938964844, 9.065699577331543, 7.26385498046875, 3.6614797115325928, 11.053370475769043, 12.188858032226562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.8736567497253418, -3.415337562561035, -4.288686752319336, -4.9104743003845215, -3.4944400787353516, -0.11211872100830078, 7.5854172706604, 7.968987941741943, 2.9728641510009766, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -31.837501525878906, -27.496429443359375, -25.137651443481445, -26.22214126586914, -30.144716262817383, -31.12102508544922, -29.173751831054688, -33.570709228515625, -33.796016693115234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -20.664934158325195, -18.07402801513672, -19.898189544677734, -20.253067016601562, -16.87091827392578, -16.551021575927734, -22.585975646972656, -22.2193660736084, -20.772544860839844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 10.378653526306152, 7.77496337890625, 5.518411636352539, 3.902899742126465, 4.9132490158081055, 5.9236040115356445, 9.409858703613281, 9.305471420288086, 9.093505859375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -9.952597618103027, -9.480365753173828, -9.014498710632324, -10.157318115234375, -11.891254425048828, -12.170452117919922, -11.784111022949219, -13.60692024230957, -12.375814437866211, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -31.105911254882812, -31.408832550048828, -31.132183074951172, -28.04798126220703, -27.163345336914062, -25.995803833007812, -31.51305389404297, -24.6486873626709, -27.078550338745117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 9.037698745727539, 7.258493423461914, 11.361688613891602, 11.932488441467285, 13.164665222167969, 10.042288780212402, 10.408851623535156, 8.636297225952148, 7.912654876708984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 54.75178527832031, 55.89004135131836, 55.557769775390625, 56.029869079589844, 54.64873504638672, 54.92485809326172, 57.974857330322266, 50.978797912597656, 54.822296142578125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 47.25932312011719, 47.7635383605957, 43.02260208129883, 45.02219009399414, 46.71601486206055, 47.770408630371094, 46.78120422363281, 50.6702995300293, 51.613525390625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 15.44748306274414, 14.082050323486328, 21.703876495361328, 22.945289611816406, 21.407806396484375, 17.062789916992188, 12.868644714355469, 12.559534072875977, 13.784754753112793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 3.8101043701171875, 1.7082477807998657, 5.481895446777344, 9.142327308654785, 5.516160011291504, 5.217766761779785, 7.072885990142822, 3.812371253967285, 3.771794080734253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 12.382007598876953, 11.184578895568848, 2.8544516563415527, 2.7914834022521973, 9.011382102966309, 10.045370101928711, 11.005083084106445, 16.84600830078125, 15.130030632019043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -0.0493464469909668, 1.2504690885543823, 4.353960990905762, 3.1294867992401123, 0.6719458103179932, -0.2608377933502197, -4.952146053314209, -2.246485710144043, -0.1634819507598877, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -28.50983428955078, -28.543621063232422, -23.50356674194336, -21.71286392211914, -23.967552185058594, -24.384132385253906, -20.864974975585938, -28.171850204467773, -30.536052703857422, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -4.703151702880859, -6.345340728759766, -11.1452054977417, -10.311065673828125, -4.227333068847656, -3.567819595336914, -0.8964977264404297, -0.21341323852539062, -2.8725337982177734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 35.38621520996094, 33.143131256103516, 33.39289855957031, 34.14527893066406, 29.588340759277344, 29.023574829101562, 23.709362030029297, 32.574745178222656, 37.635459899902344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 5.407482624053955, 2.4471166133880615, 4.84113883972168, 5.255125999450684, 6.294589996337891, 3.887810707092285, 4.028738021850586, 4.740012168884277, 2.449965476989746, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -34.790283203125, -33.179874420166016, -34.8035774230957, -34.18883514404297, -31.652572631835938, -29.692237854003906, -24.880569458007812, -28.61387062072754, -33.10106658935547, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -6.82601261138916, -3.8791613578796387, -3.232905387878418, -4.417794704437256, -10.074684143066406, -8.843290328979492, -7.340445041656494, -7.397359371185303, -4.180318832397461, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 23.636329650878906, 21.44239616394043, 21.774614334106445, 21.314220428466797, 25.184303283691406, 23.03805160522461, 19.96002769470215, 22.357938766479492, 20.833663940429688, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 5.867845058441162, 4.997488975524902, 3.729227066040039, 7.257501602172852, 8.00378131866455, 7.839554786682129, 6.293901443481445, 4.667482376098633, 4.9158782958984375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 3.543071746826172, 5.696307182312012, 7.298940658569336, 5.0910444259643555, -0.30976295471191406, -0.5502777099609375, 1.357100486755371, -0.761505126953125, 4.825279235839844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 16.266950607299805, 15.830862998962402, 16.02560806274414, 13.908126831054688, 17.299367904663086, 18.386512756347656, 17.222848892211914, 19.49753189086914, 16.66391372680664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -5.668493270874023, -5.412408828735352, -6.863370895385742, -3.4070677757263184, -1.95721435546875, -1.5843544006347656, -2.682063341140747, -5.390944480895996, -7.1234130859375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -27.07227325439453, -24.37398910522461, -23.3187255859375, -26.052661895751953, -26.977558135986328, -27.630619049072266, -25.249210357666016, -28.276485443115234, -25.585914611816406, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -8.634834289550781, -8.873842239379883, -9.482782363891602, -12.854991912841797, -10.91208553314209, -8.799920082092285, -10.277948379516602, -7.075659275054932, -8.512006759643555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 9.752068519592285, 8.304139137268066, 7.301302909851074, 11.163415908813477, 8.712454795837402, 8.473162651062012, 4.134428024291992, 4.033181190490723, 4.488775253295898, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -8.72052001953125, -6.3605804443359375, -6.711485862731934, -10.502958297729492, -10.4766845703125, -10.77910041809082, -7.695093631744385, -10.3380126953125, -7.675010681152344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -22.81609344482422, -20.17522430419922, -22.310129165649414, -26.246036529541016, -24.385629653930664, -22.45135498046875, -18.75041961669922, -19.308238983154297, -21.058847427368164, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -5.225368022918701, -6.207385063171387, -5.073215484619141, -0.06509387493133545, -2.1950392723083496, -2.3995041847229004, -5.250185966491699, -5.482793807983398, -8.360419273376465, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.47214221954345703, -0.5961837768554688, 0.11810588836669922, -3.4158248901367188, -3.265735626220703, -2.9540910720825195, 0.10749244689941406, 1.9946956634521484, 1.7304916381835938, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -6.357438087463379, -5.965023040771484, -9.226812362670898, -11.568523406982422, -12.553582191467285, -12.043802261352539, -8.341968536376953, -4.990622520446777, -3.8882153034210205, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.04349040985107422, -0.3858628273010254, -0.022147655487060547, 3.812824249267578, 3.2416229248046875, 2.768868923187256, -1.8122711181640625, -2.8506088256835938, -3.033665657043457, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -8.630027770996094, -7.500691890716553, -6.278763294219971, -11.15115737915039, -8.999042510986328, -7.8777666091918945, -7.800990104675293, -11.086626052856445, -11.64818000793457, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -32.167510986328125, -29.79179573059082, -32.05339431762695, -31.56574821472168, -32.14063262939453, -31.520109176635742, -28.034011840820312, -28.393508911132812, -28.591890335083008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -12.324127197265625, -13.437057495117188, -13.125496864318848, -10.255319595336914, -9.945510864257812, -10.250450134277344, -12.41848373413086, -12.72286319732666, -12.692598342895508, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 26.55996322631836, 24.767126083374023, 26.79827308654785, 22.228870391845703, 22.843263626098633, 22.777469635009766, 19.609882354736328, 22.646793365478516, 22.632659912109375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 13.409207344055176, 13.833032608032227, 12.266223907470703, 15.640576362609863, 14.336456298828125, 13.631989479064941, 14.859928131103516, 16.977746963500977, 17.887157440185547, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.2587995529174805, 1.6152877807617188, 2.2057628631591797, 5.183601379394531, 6.0019917488098145, 6.016582489013672, 7.894687652587891, 1.3048467636108398, 2.5885162353515625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 27.678552627563477, 27.93746566772461, 31.353790283203125, 27.673646926879883, 28.775712966918945, 27.956026077270508, 25.57188606262207, 25.37344741821289, 24.385988235473633, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 17.50530242919922, 17.41843032836914, 15.455947875976562, 19.3721866607666, 17.020471572875977, 15.922403335571289, 15.507025718688965, 18.92226219177246, 19.94879150390625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -5.8896918296813965, -6.956821441650391, -7.814574718475342, -7.751827239990234, -7.536127090454102, -6.280026912689209, -4.491708755493164, -6.829349517822266, -4.643123626708984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 3.8101234436035156, 2.568310260772705, 5.633256435394287, 3.718966007232666, 5.300090789794922, 3.8283891677856445, 1.684723138809204, 4.83043098449707, 1.8134078979492188, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -3.9395885467529297, -4.03962516784668, -5.182896614074707, -0.15346145629882812, -2.276988983154297, -3.123991012573242, -3.7846126556396484, -2.483692169189453, -3.2643661499023438, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -13.266677856445312, -12.202651977539062, -12.73082160949707, -16.266674041748047, -13.808324813842773, -11.417837142944336, -8.640634536743164, -12.787408828735352, -11.03866195678711, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 11.480241775512695, 10.258480072021484, 11.539495468139648, 11.582530975341797, 11.710596084594727, 9.682193756103516, 9.649272918701172, 11.715099334716797, 10.18020248413086, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 15.634583473205566, 13.34130859375, 12.183826446533203, 17.04276466369629, 14.205302238464355, 13.564598083496094, 10.872858047485352, 13.885065078735352, 14.50141716003418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -13.118318557739258, -12.657522201538086, -12.0232515335083, -16.560165405273438, -13.013197898864746, -11.33815860748291, -10.282367706298828, -10.431387901306152, -10.195061683654785, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -10.83639144897461, -10.677825927734375, -9.746725082397461, -7.7423787117004395, -9.648918151855469, -11.464378356933594, -8.969505310058594, -8.650781631469727, -11.177743911743164, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 8.861138343811035, 8.334190368652344, 7.370771408081055, 10.00662612915039, 9.095993041992188, 9.606865882873535, 7.626245498657227, 6.2505879402160645, 7.125341892242432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 3.7749860286712646, 5.154028415679932, 5.502321243286133, 1.1458501815795898, 3.7242021560668945, 4.349081993103027, 3.938478469848633, 3.813979148864746, 5.476152420043945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 7.834742069244385, 7.73911190032959, 8.032590866088867, 10.47723388671875, 7.222090244293213, 5.926656246185303, 7.509584903717041, 8.130260467529297, 7.632818698883057, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 11.073749542236328, 9.391119956970215, 9.374284744262695, 11.208536148071289, 12.775647163391113, 12.873088836669922, 11.086535453796387, 9.310270309448242, 9.977591514587402, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -7.07853889465332, -6.346619606018066, -5.295166492462158, -7.66158390045166, -6.808588981628418, -6.9319610595703125, -7.657794952392578, -5.681145191192627, -5.514395236968994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -2.7524356842041016, -1.531757116317749, -2.3822193145751953, -1.8669224977493286, -3.8492770195007324, -3.0407590866088867, -1.5721440315246582, -2.0710654258728027, -2.6433522701263428, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 3.62642765045166, 3.4349074363708496, 2.4500274658203125, 2.2318835258483887, 4.739833831787109, 4.962055206298828, 4.801329135894775, 1.5962867736816406, 1.9321465492248535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -11.103745460510254, -10.871089935302734, -9.405564308166504, -10.57382869720459, -11.194807052612305, -11.673291206359863, -13.018118858337402, -10.442110061645508, -10.485865592956543, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -5.074118614196777, -4.732855319976807, -5.590394496917725, -4.855156898498535, -5.962564468383789, -5.152750015258789, -5.065261363983154, -5.299532890319824, -5.21566915512085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 5.553430557250977, 5.393984794616699, 4.063076972961426, 3.2614078521728516, 4.380365371704102, 4.3093109130859375, 5.083754539489746, 3.4724373817443848, 3.90582537651062, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -4.497572898864746, -4.175044059753418, -2.8768043518066406, -3.8323097229003906, -4.437273979187012, -4.341378211975098, -4.406997203826904, -2.997553825378418, -3.6207187175750732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -4.464594841003418, -3.8676881790161133, -4.70142936706543, -4.370569705963135, -4.8332977294921875, -4.529686450958252, -3.426220417022705, -3.53615665435791, -3.8919315338134766, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -1.390810489654541, -1.613642692565918, -2.467034339904785, -2.6738381385803223, -2.164691209793091, -1.954737901687622, -1.1326253414154053, -1.377241611480713, -2.007695198059082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -5.699543476104736, -6.097168922424316, -4.644586563110352, -5.130372047424316, -5.4971771240234375, -5.3067522048950195, -5.884693145751953, -5.782618045806885, -5.753657817840576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -0.3457412123680115, 0.03706967830657959, -0.9466972351074219, -0.9441161155700684, -1.4679830074310303, -2.0143113136291504, -2.2183215618133545, -1.4827589988708496, -0.628347635269165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.5255472660064697, 0.8312299251556396, -0.4171004295349121, -0.7925570011138916, 0.2490941882133484, 0.9493119716644287, 0.6934199333190918, 0.47000789642333984, 0.2471151351928711, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -10.35586929321289, -10.111214637756348, -8.597491264343262, -9.003331184387207, -9.474634170532227, -9.194723129272461, -8.561941146850586, -10.189410209655762, -10.63359260559082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -6.412511348724365, -6.222933292388916, -6.288914203643799, -5.885142803192139, -6.01892614364624, -6.433023452758789, -6.435161590576172, -5.919766426086426, -5.9223833084106445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 6.860882759094238, 6.470437049865723, 5.504847526550293, 5.543961524963379, 6.614762783050537, 6.8401312828063965, 5.683467864990234, 6.623996257781982, 6.799516677856445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 5.630119323730469, 5.479243278503418, 6.350830554962158, 6.129350662231445, 4.968567848205566, 4.619967460632324, 5.203227996826172, 4.804852485656738, 5.25141716003418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 3.0538783073425293, 3.1738643646240234, 3.184093952178955, 3.724543809890747, 4.041482448577881, 4.2801618576049805, 4.515344619750977, 4.173890113830566, 3.928955078125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 4.061929702758789, 4.234851837158203, 4.015264987945557, 3.808690071105957, 4.152910232543945, 3.9897046089172363, 3.4483742713928223, 3.1800425052642822, 3.4477009773254395, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -1.2215042114257812, -1.160780906677246, -0.7843837738037109, -0.7198152542114258, -1.3341922760009766, -1.6158361434936523, -1.3926095962524414, -1.2679729461669922, -1.248453140258789, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.8064641952514648, 0.5374584197998047, 0.2520027160644531, 0.5188808441162109, 1.1320514678955078, 1.5853729248046875, 1.6240520477294922, 1.8727054595947266, 1.5482234954833984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 2.8563365936279297, 2.8366875648498535, 2.9214181900024414, 2.642244338989258, 2.1884098052978516, 1.7748298645019531, 1.7778701782226562, 1.5697402954101562, 1.970083236694336, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -3.2034568786621094, -3.1529006958007812, -3.053523063659668, -2.8341240882873535, -2.6794614791870117, -2.5017566680908203, -2.626016616821289, -2.2990474700927734, -2.6175143718719482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]]


# In[139]:


J = np.array(J)
J.shape


# In[ ]:


import pickle
X = pickle.load(open('intermediate_result_mfcc_new.pkl', 'rb'))


# In[173]:


len(X)


# In[ ]:


y = pickle.load(open('intermediate_result_labels_new.pkl', 'rb'))


# In[175]:


output=np.concatenate(X,axis=0)


# In[163]:


output = np.array(output)
output.shape


# In[40]:


o = np.delete(output, removed_indexes, axis = 0)
o.shape


# In[36]:


len(X)


# In[164]:



y = np.array(y)


# In[165]:





# In[4]:


y_replace_dict = {'Ah':0, 'Ih':1, 'Z':2, 'W':3, 'D':4}
possible_y = ['D', 'Ah', 'Ih', 'Z', 'W']
count = 0
new_y = []
removed_indexes = []
for ind, i in enumerate(y):
    if i in possible_y:
        if i in y_replace_dict:
            new_y.append(y_replace_dict[i])
            continue
        else:
            y_replace_dict[i] = count
            new_y.append(count)
            count+=1
    else:
        removed_indexes.append(ind)


# In[185]:


y = np.array(new_y)


# In[186]:


y_replace_dict


# In[187]:


len(y)


# In[188]:


new_X = np.delete(output, removed_indexes, axis = 0)


# In[189]:


new_X.shape


# In[190]:


import pickle
pickle.dump(new_X, open('audio_features_n.pkl', 'wb'))


# In[191]:


pickle.dump(y, open('audio_labels_n.pkl', 'wb'))


# In[3]:


import pickle
new_X = pickle.load(open('audio_features_n.pkl', 'rb'))
y = pickle.load(open('audio_labels_n.pkl', 'rb'))


# In[6]:


min(y)


# In[7]:


#Split twice to get the validation set
#Split twice to get the validation set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(new_X, y, test_size=0.25, random_state=50, stratify=y)
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=123)
#Print the shapes
X_train.shape, X_test.shape, X_val.shape, len(y_train), len(y_test), len(y_val)


# In[193]:


X_train.shape


# In[194]:


import pandas as pd
import os
#import librosa
#import librosa.display
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import normalize
import warnings
warnings.filterwarnings('ignore')
from sklearn.model_selection import train_test_split
import tensorflow
from keras.layers import LSTM, Dense, Dropout
import keras


# In[155]:


six_classes = np.bincount(y)
total = sum(six_classes)
class_dict = {}
for i in six_classes:
    print('Examples:\n    Total: {}\n    Positive: {} ({:.2f}% of total)\n'.format(
        total, i, 100 * i / total))
    weight_for_0 = (1 / i) * (total / 2.0)
    #weight_for_1 = (1 / pos) * (total / 2.0)

    class_weight = {0: weight_for_0, 1: weight_for_1}

    print('Weight for class 0: {:.2f}'.format(weight_for_0))
    print('Weight for class 1: {:.2f}'.format(weight_for_1))


# In[9]:


def build_model(input_shape):
    model = tf.keras.Sequential()
    model.add(tf.keras.layers.LSTM(128, input_shape = input_shape, return_sequences =True))
    model.add(tf.keras.layers.Flatten())
    #model.add(tf.keras.layers.LSTM(64))
    model.add(tf.keras.layers.Dense(64, activation="relu"))
    model.add(tf.keras.layers.Dense(5,activation = "softmax"))
    return model


# In[20]:


import tensorflow as tf
input_shape = (128,50)
model = build_model(input_shape)
# compile model
optimiser = tf.keras.optimizers.Adam(lr=0.001)
model.compile(optimizer=optimiser,
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
model.summary()
history = model.fit(X_train, y_train, validation_data=(X_val, y_val),
                                 batch_size=16, epochs=4)
model.save("model_RNN_LSTM.h5")
print("Saved model to disk")


# In[ ]:


model.save("model_RNN_LSTM.h5")


# In[ ]:


history_dict=history.history
loss_values=history_dict['loss']
acc_values=history_dict['acc']
val_loss_values = history_dict['val_loss']
val_acc_values=history_dict['val_acc']
epochs=range(1,51)
fig,(ax1,ax2)=plt.subplots(1,2,figsize=(15,5))
ax1.plot(epochs,loss_values,'co',label='Training Loss')
ax1.plot(epochs,val_loss_values,'m', label='Validation Loss')
ax1.set_title('Training and validation loss')
ax1.set_xlabel('Epochs')
ax1.set_ylabel('Loss')
ax1.legend()
ax2.plot(epochs,acc_values,'co', label='Training accuracy')
ax2.plot(epochs,val_acc_values,'m',label='Validation accuracy')
ax2.set_title('Training and validation accuracy')
ax2.set_xlabel('Epochs')
ax2.set_ylabel('Accuracy')
ax2.legend()
plt.show()


# In[ ]:


input_shape=(128,1000)
# With 1128,000, I get 42.63
model = keras.Sequential()
model.add(LSTM(128,input_shape=input_shape))
model.add(Dropout(0.2))
model.add(Dense(128, activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(48, activation='relu'))
model.add(Dense(24, activation='softmax'))
#model.build(input_shape)
#model.summary()


# In[117]:


model.compile(optimizer=keras.optimizers.Adam(),loss='SparseCategoricalCrossentropy',metrics=[keras.metrics.SparseCategoricalAccuracy()])


# In[ ]:


X_train.shape


# In[119]:


history = model.fit(X_train, y_train, epochs=1, batch_size=72, 
                    validation_data=(X_test, y_test), shuffle=False)


# In[87]:


get_ipython().system('pip install pyyaml h5py ')


# In[90]:



model.save('my_model.h5')


# In[ ]:





# In[15]:


print(len(X[0][0][1]))


# In[124]:


X[0]


# In[68]:


new_X = []
for i in X:
    intermediate = []
    for j in i:
        #print(j[0])
        intermediate.append(j[0])
    new_X.append(intermediate)


# In[72]:


X = np.array(new_X)
print(X.shape)
X = np.array((X-(np.min(X)))/((np.max(X))-(np.min(X))))
X = X/np.std(X)
y = np.array(y)


# In[73]:


X[1]

